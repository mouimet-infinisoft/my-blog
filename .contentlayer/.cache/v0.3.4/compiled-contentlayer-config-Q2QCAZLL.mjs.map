{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/content-definitions/page.ts", "../../../lib/content-definitions/post.ts", "../../../lib/utils.ts", "../../../lib/social-data.ts", "../../../lib/metadata.ts", "../../../lib/content-definitions/author.ts", "../../../lib/content-definitions/series.ts"],
  "sourcesContent": ["import { makeSource } from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeKatex from \"rehype-katex\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkMath from \"remark-math\";\n\nimport { Page } from \"./lib/content-definitions/page\";\nimport { Post } from \"./lib/content-definitions/post\";\n\nexport const HEADING_LINK_ANCHOR = `anchor-heading-link`;\n\nexport default makeSource({\n  contentDirPath: \"./content\",\n  documentTypes: [Post, Page],\n  mdx: {\n    esbuildOptions(options) {\n      options.target = \"esnext\";\n      return options;\n    },\n    remarkPlugins: [[remarkGfm], [remarkMath]],\n    rehypePlugins: [\n      [rehypeKatex],\n      [rehypeSlug],\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: \"wrap\",\n          properties: {\n            className: [HEADING_LINK_ANCHOR],\n          },\n        },\n      ],\n      [\n        rehypePrettyCode,\n        {\n          // prepacked themes\n          // https://github.com/shikijs/shiki/blob/main/docs/themes.md\n          theme: \"github-dark\",\n\n          // https://stackoverflow.com/questions/76549262/onvisithighlightedline-cannot-push-classname-using-rehype-pretty-code\n          // FIXME: maybe properly type this\n          onVisitLine(node: any) {\n            // Prevent lines from collapsing in `display: grid` mode, and\n            // allow empty lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n            node.properties.className = [\"line\"]; // add 'line' class to each line in the code block\n          },\n\n          // FIXME: maybe properly type this\n          onVisitHighlightedLine(node: any) {\n            node.properties.className?.push(\"line--highlighted\");\n          },\n        },\n      ],\n    ],\n  },\n\n});\n", "import { defineDocumentType } from \"contentlayer/source-files\";\n\nexport const Page = defineDocumentType(() => ({\n  name: \"Page\",\n  filePathPattern: `pages/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    lastUpdatedDate: {\n      type: \"date\",\n    },\n    status: {\n      type: \"enum\",\n      options: [\"draft\", \"published\"],\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n", "// Inspired by https://delba.dev/blog/next-blog-build-time-syntax-highlighting\nimport { defineDocumentType } from \"contentlayer/source-files\";\nimport GithubSlugger from \"github-slugger\";\n\nimport { calculateReadingTime } from \"../utils\";\nimport { Author } from \"./author\";\nimport { Series } from \"./series\";\n\nexport const tagOptions = [\n  \"starter\",\n  \"development\",\n  \"docs\",\n  \"freelancing\",\n  \"opinion\",\n  \"jamstack\",\n  \"frontend\",\n  \"development\",\n  \"javascript\",\n  \"typescript\",\n  \"react\",\n  \"nextjs\",\n  \"gatsby\",\n  \"tailwindcss\",\n  \"ai\",\n  \"sdlc\",\n  \"voice-driven-development\",\n  \"mobile-development\",\n  \"software-engineering\",\n  \"case-study\",\n];\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    publishedDate: {\n      type: \"date\",\n      required: true,\n    },\n    lastUpdatedDate: {\n      type: \"date\",\n    },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\", options: tagOptions },\n      required: false,\n    },\n    series: {\n      type: \"nested\",\n      of: Series,\n    },\n    author: {\n      type: \"nested\",\n      of: Author,\n    },\n    status: {\n      type: \"enum\",\n      options: [\"draft\", \"published\"],\n      required: true,\n    },\n  },\n  computedFields: {\n    tagSlugs: {\n      type: \"list\",\n      resolve: async (doc) => {\n        if (doc.tags) {\n          // make a new array of tags to use them in computedFields https://github.com/contentlayerdev/contentlayer/issues/149\n          const tags = [...(doc?.tags ?? ([] as string[]))];\n          const slugger = new GithubSlugger();\n\n          return tags.map((tag) => slugger.slug(tag));\n        }\n        return null;\n      },\n    },\n    readTimeMinutes: {\n      type: \"number\",\n      resolve: (doc) => calculateReadingTime(doc.body.raw),\n    },\n    headings: {\n      type: \"json\",\n      resolve: async (doc) => {\n        // use same package as rehypeSlug so toc and sluggified headings match\n        // https://github.com/rehypejs/rehype-slug/blob/main/package.json#L36\n        const slugger = new GithubSlugger();\n\n        // https://stackoverflow.com/a/70802303\n        const regXHeader = /\\n\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(({ groups }) => {\n          const flag = groups?.flag;\n          const content = groups?.content;\n          return {\n            heading: flag?.length,\n            text: content,\n            slug: content ? slugger.slug(content) : undefined,\n          };\n        });\n\n        return headings;\n      },\n    },\n    slug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n", "import { clsx, type ClassValue } from \"clsx\";\nimport { Post } from \"contentlayer/generated\";\nimport { compareDesc } from \"date-fns\";\nimport { twMerge } from \"tailwind-merge\";\n\nimport siteMetadata from \"./metadata\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const calculateReadingTime = (text: string): number => {\n  const wordsPerMinute = 200; // Average humans read about 200-250 words per minute.\n  const noOfWords = text.split(/\\s/g).length;\n\n  const minutes = noOfWords / wordsPerMinute;\n  const readTime = Math.ceil(minutes);\n\n  return readTime;\n};\n\nexport const getTagsWithCount = (posts: Post[]) =>\n  posts.reduce((acc: any, post: Post) => {\n    post.tags?.forEach((tag: any) => {\n      if (acc[tag]) {\n        acc[tag] += 1;\n      } else {\n        acc[tag] = 1;\n      }\n    });\n    return acc;\n  }, {});\n\nexport function debounce<T extends (...args: any[]) => any>(func: T, wait: number, immediate?: boolean) {\n  let timeout: ReturnType<typeof setTimeout> | null;\n  return function (this: ThisParameterType<T>, ...args: Parameters<T>) {\n    const context = this;\n    const later = function () {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout!);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\nexport const sortByDate = (a: Post, b: Post) =>\n  compareDesc(new Date(a.lastUpdatedDate || a.publishedDate), new Date(b.lastUpdatedDate || b.publishedDate));\n\nexport const pageCount = (number: number) => Math.ceil(number / siteMetadata.postsPerPage);\n", "import { SocialProfile } from \"@/types\";\n\nexport const socialProfiles: SocialProfile[] = [\n  {\n    name: \"github\",\n    link: \"https://github.com/mouimet-infinisoft\",\n  },\n  {\n    name: \"linkedin\",\n    link: \"https://www.linkedin.com/in/mouimet-infinisoft/\",\n  },\n  {\n    name: \"x\",\n    link: \"https://x.com/InfinisoftI\",\n  },\n];\n", "import { AuthorType, SiteMetaData } from \"@/types\";\n\nimport { socialProfiles } from \"./social-data\";\n\nexport const BASE_URL =\n  `https://${process.env.VERCEL_URL}` ||\n  process.env.NEXT_PUBLIC_BASE_URL ||\n  `http://localhost:${process.env.PORT || 3000}`;\n\nexport const defaultAuthor: AuthorType = {\n  name: \"Martin Ouimet\",\n  handle: \"@InfinisoftI\",\n  socialProfiles,\n  email: \"mart@infinisoft.world\",\n  website: \"https://blog.infinisoft.world\",\n  jobTitle: \"Technology Leader & AI Solutions Architect\",\n  company: \"Infinisoft World Inc.\",\n  availableForWork: true,\n  location: {\n    city: \"Montreal\",\n    media: \"/martin-portrait.jpg\",\n  },\n};\n\nconst defaultTitle = `${defaultAuthor.name}'s Blog`;\nconst defaultDescription = `I'm ${defaultAuthor.name}, an innovative technology leader with 20+ years of experience transforming businesses through AI and cloud solutions. Founder and CEO of Infinisoft World.`;\n\nconst siteMetadata: SiteMetaData = {\n  title: {\n    template: `%s | ${defaultTitle}`,\n    default: defaultTitle,\n  },\n  description: defaultDescription,\n  siteRepo: \"https://github.com/mart-infinisoft/blog-template\",\n  newsletterProvider: \"mailerlite\",\n  newsletterUrl: \"https://blog.infinisoft.world\",\n  analyticsProvider: \"umami\",\n  defaultTheme: \"system\",\n  activeAnnouncement: false,\n  announcement: {\n    buttonText: \"Support on DevHunt \u2192\",\n    link: \"https://devhunt.org/tool/modern-developer-blog-template-digital-garden-starter\",\n  },\n  postsPerPage: 10,\n  postsOnHomePage: 8,\n  projectsOnHomePage: 4,\n};\n\nexport default siteMetadata;\n", "import { defineNestedType } from \"contentlayer/source-files\";\n\nexport const Author = defineNestedType(() => ({\n  name: \"Author\",\n  fields: {\n    name: { type: \"string\", required: true },\n    image: { type: \"string\" },\n  },\n}));\n", "import { defineNestedType } from \"contentlayer/source-files\";\n\nexport const Series = defineNestedType(() => ({\n  name: \"Series\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    order: {\n      type: \"number\",\n      required: true,\n    },\n  },\n}));\n"],
  "mappings": "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",
  "names": ["defineDocumentType", "defineNestedType", "defineDocumentType"]
}
